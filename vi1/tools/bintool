#!/usr/bin/env python3.6
# Exchange CLI Tool Skeleton
# DarkerEgo 2018

"""

This is a skeleton for writing API wrappers for exchange.

"""

# 
import sys
import json
import argparse
import logging
from sys import exit
import binconf
from binance.client import Client

#api_key = "nUB4BD2DIrxsmpPw5nYS2RuzQLbdHtbM5CeRf28EpSVuPBRYDtfaBu9w3wLt8leB"
#api_secret = "5ayUUEhj1Drg5vS2YsslQcs8fzZmXnhliYPkpdVYgOUuP49u8sXTWR6JKPvC6zM7"
api_key = binconf.api_key
api_secret = binconf.api_secret

api = Client(api_key, api_secret)


# local libs
# import <api>
# Log Formatter
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG, filename='tool.log')

"""
API Tool Skeleton

"""
key = ''
secret = ''
withdrawal_enabled=True

def timeStamp():
     return time.time()

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)




try:
    # For Python 3+
    from configparser import ConfigParser, NoSectionError
except ImportError:
    # Fallback to Python 2.7
    from ConfigParser import ConfigParser, NoSectionError
def main(argv):
    # Setup Argument Parser
    parser = argparse.ArgumentParser(description='Exchange API Tool Skeleton')
    # functions
    parser.add_argument('-f', '--config', default='./tool.cfg', type=str, required=False, help='config .cfg file')
    parser.add_argument('-t', '--ticker', default=False, action='store_true', required=False, help='Get ticker information for pai , specify with -p (example: BTC-ETH)')
    parser.add_argument('-d', '--deposit_address', action='store_true', default=False, required=False, help='Get deposit addresses for currency (specify with -c)')
    parser.add_argument('-V', '--verbose', action='store_true', default=False, required=False, help='Enable extra verbose messages for debugging')
    #getdeposithistory
    parser.add_argument('-D', '--deposit_history', action='store_true', default=False, required=False, help='Return acct deposit history')
    parser.add_argument('-B', '--balances', default=False, action='store_true', required=False, help='Get all available balances')
    parser.add_argument('-k', '--balance', default=False, action='store_true', required=False, help='Get a particular account balance (specifiy with -c)')
    parser.add_argument('-b', '--buy_limit', default=False, action='store_true', required=False, help='Buy Limit Order ')
    parser.add_argument('-s', '--sell_limit', default=False, action='store_true', required=False, help='Sell Limit Order')
    parser.add_argument('-C', '--cancel_order', default=False, action='store_true' ,required=False, help="Cancel an order")
    parser.add_argument('-m', '--buy_market', default=False, action='store_true' ,required=False, help='Buy at market price')
    parser.add_argument('-S', '--sell_market', default=False, action='store_true' ,required=False, help='Sell at market price')
    parser.add_argument('-W', '--withdraw', default=False, action='store_true', required=False, help="DANGEROUS: Withdraw (specify currency <-c>, amount <-a>, and address <-A>)")
    parser.add_argument('-w', '--withdrawal_history', default=False, action='store_true', required=False, help='Get withdrawl history (specify currency <-c> , and optionally count <-x>) ')
    parser.add_argument('-R', '--auto_withdraw', default=False, action='store_true', required=False, help='Automated withdrawal ((specify currency <-c>, amount <-a>, and address <-A>)')
    parser.add_argument('-O', '--open_orders', default=False, action='store_true', required=False, help='Get open orders for pair (specify with -p)')
    parser.add_argument('-o', '--order_book', default=False, action='store_true', required=False, help='Retreive order book for pair')
    parser.add_argument('-T', '--order_type', default='both', type=str, required=False, help='Specify "buy", "sell", or "both"')
    parser.add_argument('-I', '--currencies',  default=False, action='store_true', required=False, help='Return a list of supported currency information')
    parser.add_argument('-H', '--order_history', default=False, action='store_true', required=False, help='Return your order history')
    # getorder
    parser.add_argument('-q', '--order_status_query', default=False, action='store_true', required=False, help='Query an order by uuid for status')


    # arguments to functions
    #str
    
    parser.add_argument('-c', '--currency', default='null', type=str, required=False, help='Specify a currency (example: BTC)')
    parser.add_argument('-p', '--pair', default='null', type=str, required=False, help='Specify a currency pair (example: BTC_ETH)')
    parser.add_argument('-i', '--order_id', type=str, default='null',required=False, help="Specify an order id")
    parser.add_argument('-A', '--address', type=str, default='null', required=False, help="Specify a crypto wallet address for withdrawal (example: 15isHXhXV85i7QFwwwed9gg9ET5mWjNppP")
    
    # int
    parser.add_argument('-x', '--count', default=20, type=int, required=False, help='Specify a count <for depth>')
    #float
    parser.add_argument('-a', '--amount', default='0.0', type=float, required=False, help='Specify an amount to buy, sell, withdraw, etc')
    parser.add_argument('-P', '--price', default='0.0', type=float , required=False, help="Price to buy or sell at")
    

    args = parser.parse_args()
    config = ConfigParser()
    order_type = args.order_type
    ticker = args.ticker
    order_book = args.order_book
    deposit_address = args.deposit_address
    balances = args.balances
    balance = args.balance
    buy_limit = args.buy_limit
    sell_limit = args.sell_limit
    buy_market = args.buy_market
    sell_market = args.sell_market
    cancel_order = args.cancel_order
    withdraw = args.withdraw
    auto_withdraw = args.auto_withdraw
    withdrawal_history = args.withdrawal_history
    address = args.address
    orders = args.open_orders
    currencies = args.currencies
    deposit_history = args.deposit_history
    order_status_query = args.order_status_query
    order_history = args.order_history
    currency = args.currency
    pair = args.pair
    order_id = args.order_id
    count = args.count
    amount = args.amount
    price = args.price
    debug = args.verbose
    """ Configuation Parser. Create a .cfg file with 
        the following fields:
        [keys]
        exchangeKey = ''
        exchangeSecret = ''
    """
 #   try:
 #       config.read(args.config)
 #       exchangeKey = config.get('keys', 'exchangeKey')
 #       exchangeSecret = config.get('keys', 'exchangSecret')
 #       key = exchangeKey
 #       secret = exchangeSecret
 #       if debug: print("%s : %s" % (key,secret))
 #   except NoSectionError:
 #       print('No Config File Found! Running in Drymode!')
 #       args.dryrun = True
 #       exchangekey = 'EXCHANGE_API_KEY'
 #       exchangesecret = 'EXCHANGE_API_SECRET'
 #       config.set('keys', 'exchangeKey', exchangekey)
 #       config.set('keys', 'exchangeSecret', exchangesecret)

    #    try:
    #        with open(args.config, 'w') as configfile:
    #            config.write(configfile)
    #    except IOError:
    #        eprint('Failed to create and/or write to {}'.format(args.config))
    #    # do stuff here
    #    api = exchange.Client(key, secret) # init some API lib
    #    
    #    tS = timeStamp()
    #    logging.debug("Program started at %s" % tS)
        
    def get_ticker(pair):
        pair = str(pair)
        if pair == 'null':
            eprint('WARN: No pair specified, defaulting to BTC-ETH')
            pair == 'BTC-ETH'
        try:
            #t = api.get_recent_trades(symbol=pair)
            t = api.get_orderbook_ticker(symbol=pair)
        except Exception as err:
            logging.error(err)
            eprint('Error getting ticker data: '+str(err))
            return False
        else:
            tt = json.dumps(t)
            #tt = json.loads(tt)
            try:
                #tt = tt['Last']
                return(tt)
            except Exception as err:
                eprint(err)
                #return(tt)
        
    def get_deposit_address(currency):
        if currency == 'null':
            eprint('WARN: No currency specified, defaulting to BTC')
            currency = 'BTC'
        try:
            add = api.get_deposit_address(asset=currency)
        except Exception as err:
            logging.error(err)
            eprint("Error getting deposit address: "+ str(err))
            return False
        else:
            add_ = json.dumps(add)
            return add_
        
    def get_balances():
        
        try:
            bals = api.get_account()['balances']
        except Exception as err:
            logging.error(err)
            eprint('Error getting balances' + str(err))
            return False
        else:
            bals = json.dumps(bals)
            return bals
        
    def get_balance(currency):
        if currency == 'null':
            eprint('WARN: No currency specified, defaulting to BTC')
            currency = 'BTC'
        try:
            bal = api.get_asset_balance(currency)
        except Exception as err:
            logging.info(err)
            eprint('Error getting balance' + str(err))
            return False
        else:
            bal = json.dumps(bal)
            return bal

    def get_order_book(pair,otype,depth=20):
        pair = str(pair)
        otype = str(otype)
        depth = int(depth)
        try:
            ret = api.get_order_book(symbol=pair)
        except Exception as err:
            eprint("Error getting orderbook")
            logging.info("Error getting orderbook: "+ str(err))
        else:
            ret = json.dumps(ret)
            
            return ret
    
    def buy_limit_order(pair, amount, price):
        if pair == 'null':
            eprint('Specify a pair with -p')
            return False
        if amount == '0.0':
            eprint('Specify an amount with -a')
            return False
        if price == '0.0':
            eprint('Specify a price with -P')
            return False
        try:
            ret = api.order_limit_buy(symbol=pair, quantity=amount, price=price)
        except Exception as err:
            logging.info(err)
            eprint('Error placing buy limit order: '+ str(err))
            return False
        else:
            ret = json.dumps(ret)
            return(ret)

    def sell_limit_order(pair, amount, price):
        if pair == 'null':
            eprint('Specify a pair with -p')
            return False
        if amount == '0.0':
            eprint('Specify an amount with -a')
            return False
        if price == '0.0':
            eprint('Specify a price with -P')
            return False
        try:
            ret = api.order_limit_sell(symbol=pair, quantity=amount, price=price)
        except Exception as err:
            logging.info(err)
            eprint('Error placing sell limit order: '+ str(err))
            return False
        else:
            ret = json.dumps(ret)
            return(ret)

    def buy_market_order(pair, amount):
    #
        #
        if pair == 'null':
            eprint('Specify a pair with -p')
            return False
        if amount == '0.0':
            eprint('Specify an amount with -a')
            return False
        try:
            ret = api.order_market_buy(symbol=pair,quantity=amount)
        except Exception as err:
           eprint(err)
           logging.info(err)
        else:
           try:
               ret = json.dumps(ret)
           except Exception as err:
               logging.info(err)
           else:
               return(ret)


    def sell_market_order(pair, amount):
        if pair == 'null':
            eprint('Specify a pair with -p')
            return False
        if amount == '0.0':
            eprint('Specify an amount with -a')
            return False
        try:
            ret = api.order_market_sell(symbol=pair,quantity=amount)
        except Exception as err:
            eprint(err)
            logging.info(err)
        else:
            try:
                ret = json.dumps(ret)
            except Exception as err:
                logging.info(err)
            else:
                return(ret)



    def cancel(order_id, pair):
        if order_id == 'null':
            eprint('Specify an order_id with -i')
            return False
        try:
            ret = api.cancel_order(orderId=order_id, symbol=pair)
        except Exception as err:
            logging.info(err)
            eprint('Error canceling order: '+ str(err))
            return False
        else:
            ret = json.dumps(ret)
            return(ret)

    def auto_binance_withdraw(self, currency, amount, address):
        if currency == 'null':
            self.eprint('Defaulting to BTC')
            currency = 'BTC'
            #return False
        if amount == '0.0':
            self.eprint('Specify an amount!')
            return False
        if address == 'null':
            self.eprint('Specify an address with -A !')
            return False
        try:
            ret = self.api.withdraw(asset=currency, address=address, amount=amount)
        except Exception as err:
            logging.error(err)
            self.eprint('Error withdrawing currency: ' + str(err))
            return False
        else:
            ret = json.dumps(ret)
            return(ret)

    def do_withdraw(currency, amount, address):
        if currency == 'null':
            eprint('Specify a currency with -c !')
            return False
        if amount == '0.0':
            eprint('Specify an amount with -a !')
            return False
        if address == 'null':
            eprint('Specify an address with -A !')
            return False
        print('Please review the following information carefully!')
        print('Currency: ' +str(currency))
        print('Address: ' + str(address))
        print('Amount: ' + str(amount))
        do_it = input("Proceed? (YES/NO) :")
        if do_it == 'YES':
            try:
                ret = api.withdraw(asset=currency, address=address, amount=amount)
            except Exception as err:
                logging.error(err)
                eprint('Error withdrawing currency: ' + str(err))
                return False
            else:
                ret = json.dumps(ret)
                return(ret)
        else:
            return(str('Withdrawal canceled'))
            logging.info('Function: do_withdraw : Withdrawal canceled')
            return False

    def wd_history(currency, count=10):
        if currency == 'null':
            #eprint('No currency specified, defaulting to BTC')
            currency = ''
        try:
            ret = api.get_withdraw_history(asset=currency)
        except Exception as err:
            logging.info(err)
            eprint('Error getting wd history: ' + str(err))
        else:
            ret = json.dumps(ret)
            return(ret)
        
    def get_orders(pair):
        if pair == 'null':
            pair=''
        try:
            ret = api.get_open_orders(symbol=pair)
        except Exception as err:
            logging.info(err)
            eprint('Error getting open orders: ' + str(err))
        else:
            ret = json.dumps(ret)
            return(ret)

    def getcurrencies():
        try:
            ret = api.getcurrencies()
        except Exception as err:
            logging.info(err)
            eprint('Error getting currency data'+ str(err))
        else:
            ret = json.dumps(ret)
            print(ret)

    def deposithistory(currency,count=10):

        if currency == 'null':
            currency=''
        
        try:
            ret = api.get_deposit_history(asset=currency)
        except Exception as err:
            logging.info(err)
            eprint('Error getting deposit history' +str(err))
        else:
            ret = json.dumps(ret)
            print(ret)

    def orderHist(pair,count=10):
        if pair == 'null' : pair=''
        try:
            ret = api.get_all_orders(symbol=pair,limit=count)
        except Exception as err:
            logging.info(err)
        else:
            ret = json.dumps(ret)
            print(ret)

    def query_order(order_id):
        if order_id == 'null':
            eprint('Specify an order id (uuid) with -i')
            return False
        else:
           try:
              ret = api.get_order(symbol=pair, orderId=order_id)
           except Exception as err:
              eprint('Error getting order history: ' + str(err))
              return False
           else:
              ret = json.dumps(ret)
              return(ret)
    """ Program Flow """




    if ticker:
            if debug:
                    print('Ticker call.')
            ret = get_ticker(pair)
            print(ret)
                
    if deposit_address:
            if debug:
                    print('Deposit address call')
            ret = get_deposit_address(currency)
            print(ret)
    if balances:
            if debug:
                    print('Get all balances call')
            ret = get_balances()
            print(ret)

    if balance:
            if debug:
                    print('Get balance call')
            ret = get_balance(currency)
            print(ret)
                

    if buy_limit:
            if debug:
                    print('Buy limit call')
            ret = buy_limit_order(pair, amount, price)
            print(ret)
    if sell_limit:
            if debug:
                    print('Sell limit call')
            ret = sell_limit_order(pair, amount, price)
            print(ret)

    if buy_market:
            if debug: print('Buy Market call')
            ret = buy_market_order(pair,amount)
            print(ret)

    if sell_market:
            if debug:
                ret = sell_market_order(pair,amount)
                print(ret)

    if cancel_order:
            if debug:
                    print('Cancel order call')
            ret = cancel(order_id)
            print(ret)
            
    if withdraw and withdrawal_enabled:
            if debug:
                    print('Withdrawal call')
            ret = do_withdraw(currency, amount, address)
            print(ret)
    elif withdraw and not withdrawal_enabled:
            eprint('Withdrawal disabled. Quitting.')
            sys.exit(0)
            
    if auto_withdraw:
        if debug:
            print('Automated withdrawal requested')
        ret = auto_binance_withdraw(currency, amount, address)
        print(ret)

    if withdrawal_history:
            if debug:
                    print('Withdrawal history call')
            ret = wd_history(currency, count)
            print(ret)
    if orders:
             if debug:
                    print('Orders call')
             ret = get_orders(pair)
             print(ret)

    if currencies:
        if debug: print('Currencies call')
        ret = getcurrencies()
        print(ret)
    
    if deposit_history:
        if debug: print('Deposit history call')
        ret = deposithistory(currency, count)
        print(ret)

    if order_history:
        if debug: print('Order history call')
        ret = orderHist(pair)
        print(ret)
    if order_book:
        if debug: print('Orderbook call')
        depth = int(count)
        otype = str(order_type)
        ret = get_order_book(pair,otype,depth)
#        ret = json.loads(ret)
        
        #for i in ret['both'][0:20]:
        #    print(i)
        print(ret)

    if order_status_query:
        if debug: print('Order status query call')
        if not order_id:
            eprint('Specify a uuid with -i')
            sys.exit(1)
        else:
            ret = query_order(order_id)
            print(ret)

if __name__ == "__main__":
    main(sys.argv[1:])
