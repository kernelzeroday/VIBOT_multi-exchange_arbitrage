#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-
# OKEX API Wrapper ~ DarkerEgo 2017
#######################################
from __future__ import print_function
import logging
import argparse
import time
import sys
####################
# Custom stuff here
####################
import ccxt
import json
import time,datetime    
import logging
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG, filename='okex-tool.log')
#logging.debug('Program started at ' )
#logging.info('So should this')
#logging.warning('And this, too')
all_balance=''
pair = ''
key = ''
secret = ''
data = ''
hist = ''
debug = False
buysell_err = str('Please specify options: -p/--pair [ex: BTC_ETH] -P/--price [ex: 0.05] -a/--amount [ex: 0.25]')
def createTimeStamp(datestr, format="%Y-%m-%d %H:%M:%S"):
    return time.mktime(time.strptime(datestr, format))
def timeStamp():
     t = int(createTimeStamp('{:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())))
     return str(t)
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
#
try:
        # For Python 3+
        from configparser import ConfigParser, NoSectionError
except ImportError:
        # Fallback to Python 2.7
        from ConfigParser import ConfigParser, NoSectionError
def main(argv):
        # Setup Argument Parser
        parser = argparse.ArgumentParser(description='OKEX API Tool')
        parser.add_argument('-c', '--config', default='./okex.cfg', type=str, required=False, help='config .cfg file')
        parser.add_argument('-p', '--pair', default='null', type=str, required=False, help='Get ticker information for this pair (example: BTC_ETH)')
        parser.add_argument('-B', '--balances', default=False, action='store_true', required=False, help='Get available balances')
        #returnCompleteBalances
        parser.add_argument('-A', '--all_balance', default=False, action='store_true', required=False, help='Get all balance data')
        parser.add_argument('-H', '--history', default=False, action='store_true', required=False, help='print market history data for given pair ,specify w -p')
        parser.add_argument('-g',  '--gen_addr', default='null', type=str, required=False, help='Generate a new deposite address for supplied currency (example: BTC)')
        parser.add_argument('-ii', '--info', default=False, action='store_true',  required=False, help='Return currency info')
        parser.add_argument('-t', '--ticker', default=False, action='store_true', required=False, help='Get ticker information for pai , specify with -p (default: BTC_ETH)')
        #returnFeeInfo
        parser.add_argument('-F', '--fee', default=False, action='store_true', required=False, help='Get  fee info for account')
        #
        parser.add_argument('-b', '--buy', default=False, action='store_true', required = False, help='Buy ')
        parser.add_argument('-s', '--sell', default=False, action='store_true', required = False, help='Sell ')
        parser.add_argument('-a', '--amount', default='0.0', type=float, required=False, help='Amount to buy or sell')
        parser.add_argument('-P','--price', default='0.0', type=float , required=False, help="Price to buy or sell at")
        parser.add_argument('-o','--orders', default=False, action='store_true', required=False, help="Return open orders")
        parser.add_argument('-C', '--cancel_order', default=False, action='store_true' ,required=False, help="Cancel an order")
        parser.add_argument('-m', '--move_order', default=False, action='store_true', required=False, help="Move an order")
        parser.add_argument('-i', '--order_id', type=str, default='null',required=False, help="Cancel an order")
        parser.add_argument('-S', '--since', type=int, default='24000', required=False, help="Time - this")
        # Withdrawals
        parser.add_argument('-w', '--withdraw', action='store_true', default=False, help='Withdraw currency [specify wallet_address (-W) , amount (-a), and currency (-X) ]')
        parser.add_argument('-R', '--auto_withdraw', action='store_true', default=False, help='Automated Withdrawal [specify wallet_address (-W) , amount (-a), and currency (-X) ] ')
        parser.add_argument('-W', '--wallet_address', type=str, default='null', help='Withraw to this address [example: 15isHXhXV85i7QFwwwed9gg9ET5mWjNppP ]')
        parser.add_argument('-X', '--currency', type=str, default='null', help='Withdraw this currency [example: BTC]')
        parser.add_argument('-I', '--payment_id', type=str, default=None, help='Payment ID for XMR type withdrawals')
        # Deposits
        parser.add_argument('-D', '--deposit_addresses', default=False, action='store_true' ,required=False, help="Return account deposit addresses")
        parser.add_argument('-d', '--deposit_history', default=False, action='store_true' ,required=False, help="Return deposit history")
        # parse args
        args = parser.parse_args()
        deposit_addresses = args.deposit_addresses
        deposit_history = args.deposit_history
        pair = args.pair
        information = args.info
        all_balance = args.all_balance
        balances = args.balances
        config = ConfigParser()
        hist = args.history
        since = args.since
        gen_addr = args.gen_addr
        move_order = args.move_order
        fee = args.fee
        #all_balance = args.all_balance
        withdraw = args.withdraw
        auto_withdraw = args.auto_withdraw
        payment_id = args.payment_id
        address = args.wallet_address
        if address == 'null':
            address = False
        currency = args.currency
        if currency == 'null':
            currency = False
        #
        buy = args.buy
        sell = args.sell
        amount = args.amount
        ticker = args.ticker
        price = args.price
        orders = args.orders
        cancel_order = args.cancel_order
        order_id = args.order_id
        try:
                config.read(args.config)
                okexKey = config.get('bot', 'okexkey')
                okexSecret = config.get('bot', 'okexsecret')
                key = okexKey
                secret = okexSecret
                #if debug: print("%s : %s" % (key,secret))
        except NoSectionError:
                print('No Config File Found! Running in Drymode!')
                args.dryrun = True
                okexKey = 'OKEX_API_KEY'
                okexsecret = 'OKEX_API_SECRET'
                config.set('bot', 'okexKey', okexKey)
                config.set('bot', 'okexSecret', okexSecret)
        
       
                try:
                        with open(args.config, 'w') as configfile:
                                config.write(configfile)
                except IOError:
                        eprint('Failed to create and/or write to {}'.format(args.config))
        # do stuff here
        tS = timeStamp()
        okex = ccxt.okex()
        okex.apiKey = key
        okex.secret = secret
        logging.debug("Program started at %s" % tS)
        if ticker and pair != 'null':
            ticker = okex.fetch_ticker(pair) 
            # this fixes json!
            ret = json.dumps(ticker)
            logging.info("Ticker call: "+ret)
            print(ret)
        if ticker and pair == 'null':
            print('Specify a pair with -p')
            sys.exit(1)
        if move_order:
            if order_id == 'null' or pair == 'null' or float(price) <= float('0.0') or float(amount) <= float('0.0'):
                print("Specifiy an order id <-> , price <-P> , pair <-> , and amount <-a>")
                sys.exit(1)
            else:
                try:
                    ret = data.moveOrder(order_id, price, amount)
                except Exception as err:
                    logging.info(err)
                    eprint(err)
                    sys.exit(1)
                else:
                    ret = json.dumps(ret)
                    logging.info(ret)
                    print(ret)
                    sys.exit(0)
        if all_balance:
            bals = okex.fetch_balance()
            bret = json.dumps(bals)
            logging.info("All balances call : "+str(bret))
            print(bret)
        if balances:
            bal = okex.fetch_balance()
            #ret = json.dumps(bal['info']['info']['funds']['free'][currency.lower()])
            ret = json.dumps(bal)
            logging.info("Balance call: "+ret)
            print(ret)
        if hist:
            if not pair:
                history = okex.fetch_trades()
                logging.info("History call. Not logging that much data.")
                for i in history:
                     print("%s\n" % i)
            else:
                history = okex.fetch_trades()
                logging.info("History call. Not logging that much data.")
                for i in history:
                    print("%s\n" % i)
        if gen_addr != 'null':
            ret = "no"
            ret = json.dumps(ret)
            logging.info("Generate Deposit address called: "+ret)
            print(ret)
        if buy:
            if pair != 'null':
                if float(price) > 0.0:
                    if float(amount) > 0.0:
                        try:
                          ret = okex.createLimitBuyOrder (pair, amount, price)
                          amount = str(amount)
                          price = str(price)
                          logging.info("Buy order call: %s %s at %s " % (amount,pair,price))
                        except Exception as err:
                            eprint(err)
                            sys.exit(1)
                        else:
                          if debug: eprint(ret)
                          ret = json.dumps(ret)
                          ret_ = str(ret)
                          logging.debug("Buy order call: "+ret_)
                          print(ret)
                          sys.exit(0)
                    else:
                        eprint(buysell_err)
                        sys.exit(1)
                else:
                    eprint(buysell_err)
                    sys.exit(1)
            else:
                eprint(buysell_err)
                sys.exit(1)
        if sell:
            if pair != 'null':
                if float(price) > 0.0:
                    if float(amount) > 0.0:
                        try:
                            ret = okex.createLimitSellOrder (pair, amount, price)
                        except Exception as err:
                            eprint(err)
                            sys.exit(1)
                        else:
                          ret = json.dumps(ret)
                          if debug: eprint(ret)
                          ret_ = str(ret)
                          price = str(price)
                          amount = str(amount)
                          logging.info("Sell order call: %s %s at %s " % (amount,pair,price))
                          print(ret)
                          sys.exit(0)
                    else:
                        eprint(buysell_err)
                        sys.exit(1)
                else:
                    eprint(buysell_err)
                    sys.exit(1)
            else:
                eprint(buysell_err)
                sys.exit(1)
        if orders:
            try:
                ret = okex.fetch_open_orders(pair)
            except Exception as err:
                eprint(err)
                sys.exit(1)
            else:
                ret = json.dumps(ret)
                logging.info("Open orders call: " +ret)
                print(ret)
        if cancel_order:
            if order_id != 'null':
                try:
                    ret = okex.cancelOrder(order_id)
                except Exception as err:
                    eprint(err)
                    return False
                else:
                    ret = json.dumps(ret)
                    logging.info("Cancel order call: "+ret)
                    print(ret)
            else:
                eprint("Please specify order id with -i <order id>")
                sys.exit(1)
        if deposit_addresses:
            logging.info('Get deposit address call')
            try:
                ret = "NO"
            except Exception as err:
                logging.info(err)
            else:
                ret = json.dumps(ret)
                print(ret)
        if deposit_history:
            timeNow = int(createTimeStamp('{:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())))
            span = int(timeNow) - int(since)
            try:
                ret = okex.fetch_deposits()
            except Exception as err:
                logging.info(err)
                print(err)
            else:
                #ret = json.dumps(ret)
                print(ret)
        if fee:
            logging.info('Fee info call initatiated')
            try:
                ret = okex.fees
            except Exception as err:
                eprint(err)
                sys.exit(1)
            else:
                ret = json.dumps(ret)
                print(ret)
        if information:
            ret = okex.symbols
            ret = json.dumps(ret)
            print(ret)
        if withdraw:
            logging.info('Withdrawal call initiated')
            if not currency:
                return False
            if not amount:
                return False
            if not address:
                return False
            print('WARNING: Please double check all required info for withdrawal!')
            if payment_id:
               print('INFO: Payment id %s specified' % payment_id)
            print('Currency:' +str(currency))
            print('Amount :' + str(amount))
            print('Address: ' + str(address))
            try:
                confirm = input('Proceed? (YES/NO): ')
                if confirm == 'YES':
                    do_wd = True
                else:
                    print('Canceling.')
                    return False
            except Exception as err:
                 logging.info(err)
                 sys.exit(1)
            else:
                if do_wd:
                    try:
                        ret = okex.withdraw(currency, amount, address)
                    except Exception as seriouserror:
                        logging.info('Error withdrawing!' + str(seriouserror))
                    else:
                        ts = timeStamp()
                        wd_ret = json.dumps(ret)
                        print(wd_ret)
                        logging.info('INFO:'  + str(ts) + ' Withdrawal: ' + str(wd_ret))
        if auto_withdraw:
            logging.info('Automated Withdrawal call initiated')
            if not currency:
                print('Defaulting to BTC')
                currency = 'BTC'
            if not amount:
                return False
            if not address:
                return False
            try:
                ret = okex.withdraw(currency, amount, address)
            except Exception as seriouserror:
                logging.info('Error withdrawing!' + str(seriouserror))
            else:
                ts = timeStamp()
                wd_ret = json.dumps(ret)
                print(wd_ret)
                logging.info('INFO:'  + str(ts) + ' Withdrawal: ' + str(wd_ret))
if __name__ == "__main__":
    main(sys.argv[1:])

