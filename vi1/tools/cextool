#!/usr/bin/env python3.6
#import logging
from urllib.request import urlopen
import argparse
import time
import sys
#import cexapi
import conf
import time
import json
# TODO: Fix this so it is using a real config file!
import conf
import sys
#from termcolor import colored
debug=False
import cex
cexio = cex
api = cexio.Api(conf.username, conf.api_key, conf.api_secret)



import logging
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG, filename='cex-tool.log')


def timeStamp():
    return time.time()

def coltick(col,pair):
    try:
        col = str(col)
        pair = str(pair)
        api = cexio.Api('conf.username', 'conf.api_key', 'conf.api_secret')
        last = json.dumps(api.ticker(pair)['last'])
        ask = json.dumps(api.ticker(pair)['ask'])
        bid = json.dumps(api.ticker(pair)['bid'])
        print("Last: %s Ask: %s Bid %s " % (last, ask, bid))
    except Exception as err:
        print("Error: %s" % err)
        pass

def get_fee_info():
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    try:
        ret = json.dumps(api.get_myfee)
    except Exception as err:
       print('Error: '+ str(err))
    else:
       print(ret)

def get_deposit_addresses_(currency):
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    try:
        ret = api.get_deposit_addresses(currency)
    except Exception as err:
       print('Error: ' + str(err))
    else:
       #ret = json.loads(ret)
       print(ret)

def tick(pair):
    try:
        pair = str(pair)
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
        data = json.dumps(api.ticker(pair))
        print(data)
    except Exception as err:
        print("Error: %s" % err)
        return False

def convert_price(amount,pair):
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    #amount = float(amount)
    #pair = str(pair)
    try:
        ret = api.convert(amount,pair)
    except Exception as err:
        print(err)
        return False
    else:
        return(ret)

def balances():
    try:
        #api = cexapi.API(conf.username, conf.api_key, conf.api_secret)
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
        try:
            bal = json.dumps(api.balance)
        except Exception as err:
            print(err)
            return False
        #print(bal)
        #bal = json.dumps(bal)
        return(bal)
    except Exception as err:
        print("Error: %s" % err)
        return False

def current_orders_(pair):
    try:
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
        if pair == 'null':
            orders = api.open_orders('')
        else:
            orders = api.open_orders(pair)
    except Exception as err:
        print(err)
    else:
        orders = json.dumps(orders)
        return(orders)

def orderBook(pair):
    try:
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
        if pair == 'null':
            book = api.order_book('1', 'BTC/USD')
        else:
            book = order_book = api.order_book('1',pair)
    except Exception as err:
        print(err)
    else:
        book = json.dumps(book)
        return(book)
def cancel_order_(order_id):
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    try:
        ret = api.cancel_order(str(order_id))
    except Exception as er:
        print(er)
        return False
    else:
        return("Success")

def price_stats(hours, limit, pair):
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    if valid_pair(pair):
        try:
            ret = json.dumps(api.price_stats(hours, limit, pair))
        except Exception as err:
            print(err)
            return False
        else:
            ret = json.loads(ret)
            plist = []         
            for i in ret:
                price = str(i['price'])
                timestamp = str(i['tmsp'])
                plist.append("Price: "+price+" Time: "+timestamp)
            return list(plist)

    
    else:
        print("Invalid Pair")
        return False

def get_trade_hist(since, pair):
    """
    since - return trades with tid >= since (optional parameter, 1000 or all existing (if less than 1000), elements are returned if omitted)
    """
    api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    if valid_pair(pair):
        try:
            #ret = json.dumps(api.trade_history(since, pair))
            ret = api.trade_history(since, pair)
        except Exception as err:
            print(err)
            return False
        else:
            return(ret)
    else:
        print("Invalid pair specified")
        return False
        



def valid_pair(pair):
    try:
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
        last = json.dumps(api.ticker(pair)['last'])
    except Exception as err:
        print("Valid pair: %s" %err)
        return False
    else:
        return True


def placeOrder(otype, pair, amount, price):
    pair = str(pair)
    debug = True
    try:
        api = cexio.Api(conf.username, conf.api_key, conf.api_secret)
    except Exception as err:
        print(err)
        return False
    else:
        if float(amount) > float(0):
            if float(price) and float(price) > float(0.0):
                if valid_pair(pair):
                    try:
                        if otype == 'buy':
                            ret = api.buy_limit_order(amount, price, pair)
                        if otype == 'sell':
                            ret = api.sell_limit_order(amount, price, pair)
                    except Exception as err:
                        print(err)
                        return False
                    else:
                        ret = json.dumps(ret)
                        order_info = json.loads(ret)
                        if debug: print(ret)
                        try:
                            order_type = order_info['type']
                            order_id = order_info['id']
                            order_time = order_info['time']
                            order_price = order_info['price']
                            order_amount = order_info['amount']
                            order_pending = order_info['pending']
                            order_complete = order_info['complete']
                        except Exception as err:
                            print(err)
                            return False
                        else:
                            print("Sucess. Order ID: %s posted at %s  " % (order_id,order_time,))
                            print("Type: %s Amount: %s at %s Complete: %s Pending: %s" %(order_type,order_amount,order_price,order_complete,order_pending))
                            return True
                else:
                    print("Invalid pair, not executing")
                    return False
            else:
                print("Invalid price, not exectuting")
                return False
        else:
            print("Invalid amount, not executing")
            return False


def main(argv):
        # Setup Argument Parser
        parser = argparse.ArgumentParser(description='CexIO API Tool')
        parser.add_argument('-p', '--pair', default='null', type=str, required=False, help='buy or sell this currency pair (example: BTC_ETH)')
        parser.add_argument('-P', '--price', default='0.0', type=float, required=False, help='at this price (example: 0.011)')
        parser.add_argument('-a', '--amount', default='0.0', type=float, required=False, help='for this amount (example: 0.5)')
        parser.add_argument('-c', '--convert', default=False,  action='store_true', required=False, help='Convert a crypto to fiat. Specify with <-p/--pair> <-a/--amount>')
        parser.add_argument('-C', '--cancel_order', default=False, action='store_true', required=False, help='Cancel an order with specified order id [ -i <order_id>]')
        parser.add_argument('-i', '--order_id', default='null', type=str, required=False, help='Order ID Number')
        parser.add_argument('-F', '--fee_info', default=False, action='store_true', required=False, help='Fee info for this account')


        parser.add_argument('-O', '--current_orders', default=False, action='store_true', required=False, help='Get current orders for specified pair (with -p)')
        parser.add_argument('-b', '--buy', default=False, action='store_true', required=False, help='Submit a buy order')
        parser.add_argument('-s', '--sell', default=False, action='store_true', required=False, help='Submit a sell order')

        parser.add_argument('-B',  '--balance', default=False, action='store_true', required=False, help='Get account balances (example: BTC)')
        parser.add_argument('-o', '--order_book', default=False, action='store_true', required=False, help='Return order book for given currency pair (specify with -p) (example: BTC/USD)')
        parser.add_argument('-t', '--ticker', default=False, action='store_true', required=False, help='Return ticker data for pair (specify with -p)')
        parser.add_argument('-T', '--ticker_loop', default=False, action='store_true', required=False, help='Continueously return ticker data for this pair (specify with -p)')
        parser.add_argument('-S', '--price_stat', default=False, action='store_true', required=False, help='Retrieve price statistics for last 24 hours for a given pair (specify with -p)')
        # withdrawls & deposits
        parser.add_argument('-G', '--get_deposit_address', default=False, action='store_true', required=False, help='Return deposit address for currency [specify with -X]')
        parser.add_argument('-X', '--currency', default='null', type=str, required=False, help='Specify a currency')
        
        # parse args
        args = parser.parse_args()
        #config = ConfigParser()

        get_deposit_address = args.get_deposit_address
        currency = args.currency
        if get_deposit_address and currency == 'null':
            print('Specify a currency: [ex: BTC]')
            sys.exit(1)

        pair = args.pair
        price = args.price
        amount = args.amount
        buy = args.buy
        sell = args.sell
        balance = args.balance
        orders = args.order_book
        ticker = args.ticker
        cancel_order = args.cancel_order
        current_orders = args.current_orders
        ticker_loop = args.ticker_loop
        price_stat = args.price_stat
        order_id = args.order_id
        convert = args.convert
        fee_info = args.fee_info

        tS = timeStamp()
        logging.debug("Program started at %s" %tS)


        if convert:
            if pair == 'null' or float(amount) < 0.0:
                print('Specifiy a pair with <-p/--pair> and amount with <-a/amount>')
                sys.exit(1)
            else:
                try:
                    ret = convert_price(amount,pair)
                except Exception as err:
                    print(err)
                    sys.exit(1)
                else:
                    print(ret)
        
        if buy and not sell:
            if pair != 'null':
                if float(price) > 0.0:
                    if float(amount) > 0.0:
                        try:
                            ret = placeOrder('buy',pair, amount, price)
                        except Exception as err:
                            print("Buy Error: %s" %err)
                            sys.exit(1)
                        else:
                            if ret:
                                print(ret)
                                logging.info("Buy call: "+pair+" " + str(amount) + " "+ str(price))
                                sys.exit(0)
                            else:
                                sys.exit(1)
        if sell and not buy:
             if pair != 'null':
                if float(price) > 0.0:
                    if float(amount) > 0.0:
                        try:
                             ret = placeOrder('sell', pair, amount, price)
                        except Exception as err:
                            print("Sell Error: %s" % err)
                            sys.exit(1)
                        else:
                            if ret:
                                print(ret)
                                logging.info("Sell call: "+pair+" " + str(amount) + " "+ str(price))
                                sys.exit(0)
                            else:
                                sys.exit(1)
        if price_stat:
             if pair != 'null':
                 try:
                    ret = price_stats('24','1', pair)
                 except Exception as err:
                     print(err)
                     sys.exit(1)
                 else:
                     for i in ret:
                         print(i)
             else:
                 print('Please specify a pair with <-p/--pair> (example BTC/USD)')
                 sys.exit(1)
                 
        if ticker_loop:
            if pair == 'null':
                print('Please specify a currency pair (ex: -p BTC/USD)')
                sys.exit(1)
            else:
                print(colored("Cex.io Ticker Bot", 'blue'))
                while True:
                    
                    try:
                        
                        coltick('red', pair)
                        time.sleep(1)
                        coltick('green', pair)
                    except KeyboardInterrupt:
                         print('Caught Signal, exiting with grace ...')
                         sys.exit(0)
                     
        if current_orders:
            try:
                ret = current_orders_('')
            except Exception as err:
                print(err)
                sys.exit(1)
            else:
                logging.info("Current orders call: "+ret)
                print(ret)
                sys.exit(0)
        if fee_info:
            try:
                get_fee_info()
            except Exception as err:
                print(err)
            #else:
               # print(ret)

        if cancel_order and order_id != 'null':
            try:
                ret = cancel_order_(order_id)
            except Exception as err:
                print(err)
                sys.exit(1)
            else:
                logging.info("Cancel order call: "+ret)
                print(ret)
                sys.exit(0)
        elif cancel_order and order_id == 'null':
            print('Error: specify id number with --order_id /-i')
            sys.exit(1)
                

        if balance:
            try:
                ret = balances()
            except Exception as err:
                print(err)
                sys.exit(1)
            else:
                print(ret)
                ret = str(ret)
                logging.info("Balance call: "+ret)
                sys.exit(0)
                
        if orders and pair != 'null':
            try:
                ret = orderBook(pair)
            except Exception as err:
                print(err)
                sys.exit(1)
            else:
                print(ret)
                logging.info("Orders call: "+ret)
                sys.exit(0)
        elif orders and pair == 'null':
        
            #print('Grabbing all open orders')
            try:
                ret = orderBook('')
            except Exception as err:
                print(err)
            else:
                print(ret)
                logging.info("Open orders call: "+ret)
                sys.exit(0)
            

        if ticker and pair != 'null':
            try:
                tick(pair)
            except Exception as err:
                if verbose: print(err)
                sys.exit(1)

        if get_deposit_address:
            try:
                ret = get_deposit_addresses_(currency)
            except Exception as err:
                print('Error: '+ str(err))
                pass
                sys.exit(1)
            else:
                print(ret)

if __name__ == "__main__":
    main(sys.argv[1:])

